generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                 @id @default(autoincrement())
  username           String              @unique
  password           String
  role               String
  user               UserDetails?
  progress           Progress[]
  completedSubtopics CompletedSubtopic[]
  completedAssignments CompletedAssignment[] // New relation for completed assignments
  teacher            Teacher?
  parent             Parent?
  child              Child?
  streak             Streak?
}

model UserDetails {
  id     Int    @id @default(autoincrement())
  name   String
  email  String
  role   String
  phone  String
  userId Int    @unique
  user   User?  @relation(fields: [userId], references: [id])
}

model Progress {
  id         Int @id @default(autoincrement())
  userId     Int
  categoryId Int

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([userId, categoryId])
}

model Quiz {
  id         Int        @id @default(autoincrement())
  title      String
  subject    String
  difficulty String
  duration   Int
  questions  Question[]
  scores     Score[]
}

model Question {
  id      Int      @id @default(autoincrement())
  quizId  Int
  text    String
  options String[]
  answer  String
  quiz    Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model Score {
  id     Int    @id @default(autoincrement())
  quizId Int
  studentName String
  score  Int

  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model Category {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  topics   Topic[]
  progress Progress[]
}

model Topic {
  id         Int        @id @default(autoincrement())
  name       String
  categoryId Int
  imageUrl   String
  subtopics  Subtopic[]
  category   Category   @relation(fields: [categoryId], references: [id])
}

model Subtopic {
  id                 Int                 @id @default(autoincrement())
  name               String
  topicId            Int
  topic              Topic               @relation(fields: [topicId], references: [id])
  videos             Video[]
  completedSubtopics CompletedSubtopic[]
}

model Video {
  id         Int      @id @default(autoincrement())
  name       String
  url        String
  subtopicId Int
  subtopic   Subtopic @relation(fields: [subtopicId], references: [id])
}

model CompletedSubtopic {
  id         Int      @id @default(autoincrement())
  userId     Int
  subtopicId Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subtopic   Subtopic @relation(fields: [subtopicId], references: [id], onDelete: Cascade)

  @@unique([userId, subtopicId]) 
}

model Teacher {
  id      Int    @id @default(autoincrement())
  userId  Int    @unique
  subject Int
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Parent {
  id       Int     @id @default(autoincrement())
  userId   Int     @unique
  children Child[]
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Child {
  id       Int    @id @default(autoincrement())
  parentId Int
  userId   Int    @unique
  parent   Parent @relation(fields: [parentId], references: [id], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Assignment {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  openDate    DateTime
  dueDate     DateTime
  subject     String
  completedAssignments CompletedAssignment[] // Relation to completed assignments
}

model CompletedAssignment {
  id            Int      @id @default(autoincrement())
  userId        Int
  assignmentId  Int
  fileUrl       String // Store the uploaded file URL
  submissionDate DateTime @default(now())

  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  @@unique([userId, assignmentId]) // Prevent duplicate submissions
}

model Streak {
  id           Int      @id @default(autoincrement())
  userId       Int      @unique
  currentStreak Int     @default(0)
  lastActive   DateTime @default(now())

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

